#!/usr/bin/python3.10

import pathlib
import re
from dataclasses import dataclass


@dataclass
class ChangeLog:
    title: str
    yyyymmdd: str


@dataclass
class ReleaseLog:
    version: str
    yyyymmdd: str


def get_next_version(latest_version: str) -> str:
    """
    assert get_next_version("0.0.99") == "0.1.0"
    """
    major, minor, patch = map(int, latest_version.split("."))
    patch += 1
    if patch == 100:
        patch = 0
        minor += 1
        if minor == 100:
            minor = 0
            major += 1
    return ".".join(map(str, [major, minor, patch]))


def test_get_next_version():
    assert get_next_version("0.0.99") == "0.1.0"
    assert get_next_version("0.99.99") == "1.0.0"


def main():
    """
    generate CHANGELOG.md from ChangeLogs object written in kotlin
    """
    test_get_next_version()

    changelogs_kt_file_path = (
        pathlib.Path(__file__).parent.parent
        / "app/src/main/java/jp/kawagh/kiando/ui/screens/ChangeLogScreen.kt"
    )
    assert changelogs_kt_file_path.exists(), "file not found"

    parsed_logs: list[ChangeLog | ReleaseLog] = []
    for l in changelogs_kt_file_path.read_text().split("\n"):
        if re.match(r"\s*Change.*", l):
            if len(str(l).split('"')) <= 1:
                continue
            title = l.split('"')[1]
            date = l.split(")")[-3].split("(")[-1]
            yyyymmdd_tokens = date.split(",")
            yyyymmdd = "".join(map(lambda x: str(int(x)).zfill(2), yyyymmdd_tokens))
            changelog = ChangeLog(title, yyyymmdd)
            parsed_logs.append(changelog)
        if re.match(r"\s*ReleaseLog.*", l):
            if len(str(l).split('"')) <= 1:
                continue
            version = l.split('"')[1]
            date = l.split(")")[-3].split("(")[-1]
            yyyymmdd_tokens = date.split(",")
            yyyymmdd = "".join(map(lambda x: str(int(x)).zfill(2), yyyymmdd_tokens))
            releaselog = ReleaseLog(version, yyyymmdd)
            parsed_logs.append(releaselog)
    print(*parsed_logs, sep="\n")

    file_to_write = pathlib.Path(__file__).parent.parent / "CHANGELOG.md"

    with file_to_write.open("w") as f:
        latest_version: ReleaseLog | None = next(
            filter(lambda x: isinstance(x, ReleaseLog), parsed_logs),
            None,  # type:ignore
        )
        print(
            "<!-- This file is generated by generate_changelog.py. Do NOT edit manually. -->\n",
            file=f,
        )
        if len(parsed_logs) >= 1 and isinstance(parsed_logs[0], ChangeLog):
            if latest_version:
                next_version = get_next_version(latest_version.version)
                print(f"## v{next_version} [Not released]\n", file=f)

        for log in parsed_logs:
            if isinstance(log, ChangeLog):
                print(f"- {log.title}", file=f)
            if isinstance(log, ReleaseLog):
                print(f"\n## v{log.version} [{log.yyyymmdd}]\n", file=f)


if __name__ == "__main__":
    main()
